{"/home/travis/build/npmtest/node-npmtest-david/test.js":"/* istanbul instrument in package npmtest_david */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-david/lib.npmtest_david.js":"/* istanbul instrument in package npmtest_david */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_david = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_david = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-david/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-david && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_david */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_david\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_david.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_david.rollup.js'] =\n            local.assetsDict['/assets.npmtest_david.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_david.__dirname +\n                    '/lib.npmtest_david.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-david/david/lib/david.js":"/**\n * david\n * https://github.com/alanshaw/david\n *\n * Copyright (c) 2013 Alan Shaw\n * Licensed under the MIT license.\n */\n\nvar parallel = require('async/parallel')\nvar semver = require('semver')\nvar Version = require('./version')\nvar Npm = require('./npm')\n\n// Convert dependencies specified as an array to an object\nfunction normaliseDeps (deps) {\n  if (Array.isArray(deps)) {\n    deps = deps.reduce(function (d, depName) {\n      d[depName] = '*'\n      return d\n    }, {})\n  }\n  return deps\n}\n\n/**\n * Given dep, an object obtained by calling getDependencies, determine whether dep.required (the version specified\n * in package.json) is out of date wrt dep.stable or dep.latest.\n * @param {Object} dep\n * @param {Object} [opts] Options\n * @param {Boolean} [opts.stable] Consider only stable packages\n * @param {Boolean} [opts.loose] Use loose option when querying semver\n * @returns {boolean}\n */\nfunction isUpdated (dep, opts) {\n  opts = opts || {}\n\n  var required = dep.required || '*'\n\n  // TODO: Handle tags correctly\n  if (required !== 'latest' && required !== '*') {\n    var range = semver.validRange(required, opts.loose) || ''\n    var version = opts.stable ? dep.stable : dep.latest\n\n    if (version) {\n      if (!range) {\n        return true\n      } else if (!semver.satisfies(version, range, opts.loose)) {\n        if (opts.stable && semver.gtr(version, range, opts.loose)) {\n          return true\n        } else if (!opts.stable) {\n          return true\n        }\n      }\n    }\n  }\n  return false\n}\n\nexports.isUpdated = isUpdated\n\n/**\n * Given the options passed to david, figure out the dep type.\n */\nfunction depType (opts) {\n  if (opts.dev) {\n    return 'devDependencies'\n  } else if (opts.optional) {\n    return 'optionalDependencies'\n  } else if (opts.peer) {\n    return 'peerDependencies'\n  }\n  return 'dependencies'\n}\n\n/**\n * Get a list of dependencies for the passed manifest.\n * @param {Object} manifest Parsed package.json file contents\n * @param {Object|Function} [opts] Options or callback\n * @param {Boolean} [opts.dev] Consider devDependencies\n * @param {Boolean} [opts.optional] Consider optionalDependencies\n * @param {Boolean} [opts.peer] Consider peerDependencies\n * @param {Boolean} [opts.loose] Use loose option when querying semver\n * @param {Object} [opts.npm] npm configuration options\n * @param {Boolean} [opts.error.E404] Error on 404s\n * @param {Boolean} [opts.versions] For each dependency, return the available versions\n * @param {Boolean} [opts.rangeVersions] For each dependency, return the available versions for the range specified in the package.json\n * @param {Array} [opts.ignore] List of dependency names to ignore\n * @param {Function} cb Function that receives the results\n */\nfunction getDependencies (manifest, opts, cb) {\n  manifest = manifest || {}\n\n  // Allow callback to be passed as second parameter\n  if (!cb) {\n    cb = opts\n    opts = {}\n  } else {\n    opts = opts || {}\n  }\n\n  opts.error = opts.error || {}\n  opts.ignore = opts.ignore || []\n\n  if (manifest.david && manifest.david.ignore) {\n    opts.ignore = opts.ignore.concat(manifest.david.ignore)\n  }\n\n  var pkgs = {}\n  var deps = normaliseDeps(manifest[depType(opts)] || {})\n  var depNames = Object.keys(deps)\n  var error // Return any error that occurred but don't stop processing\n\n  if (!depNames.length) {\n    return setImmediate(function () { cb(null, pkgs) })\n  }\n\n  var tasks = depNames.map(function (depName) {\n    return function (cb) {\n      if (opts.ignore.indexOf(depName) > -1) {\n        return cb()\n      }\n\n      var err\n\n      if (Object.prototype.toString.call(deps[depName]) !== '[object String]') {\n        err = new Error('Non-string dependency: ' + deps[depName])\n        err.code = 'EDEPTYPE'\n\n        if (!opts.error.EDEPTYPE) {\n          pkgs[depName] = {required: deps[depName], warn: err}\n        } else {\n          error = err\n        }\n\n        return cb()\n      }\n\n      if (Version.isScm(deps[depName])) {\n        err = new Error('SCM dependency: ' + deps[depName])\n        err.code = 'ESCM'\n\n        if (!opts.error.ESCM) {\n          pkgs[depName] = {required: deps[depName], warn: err}\n        } else {\n          error = err\n        }\n        return cb()\n      }\n\n      Npm.getVersionsInfo(depName, opts, function (err, versionsInfo) {\n        if (err) {\n          if (!opts.error.E404 && err.code === 'E404') {\n            if (err === '404 Not Found') {\n              err = new Error('404 Not Found: ' + depName)\n              err.pkgid = depName\n              err.statusCode = 404\n              err.code = 'E404'\n            }\n\n            pkgs[depName] = {required: deps[depName], warn: err}\n          } else {\n            error = err\n          }\n          return cb()\n        }\n\n        try {\n          var latestVersionInfo = Version.getLatest(versionsInfo.current, versionsInfo.versions, opts)\n\n          pkgs[depName] = {\n            required: deps[depName],\n            stable: latestVersionInfo.stable,\n            latest: latestVersionInfo.latest\n          }\n\n          if (opts.versions) {\n            pkgs[depName].versions = versionsInfo.versions\n          }\n\n          if (opts.rangeVersions) {\n            pkgs[depName].rangeVersions = Version.getVersionsInRange(deps[depName], versionsInfo.versions, opts.loose)\n          }\n        } catch (err) {\n          error = err\n        }\n\n        cb()\n      })\n    }\n  })\n\n  parallel(tasks, function () { cb(error, pkgs) })\n}\n\nexports.getDependencies = getDependencies\n\n/**\n * Get a list of updated packages for the passed manifest.\n * @param {Object} manifest Parsed package.json file contents\n * @param {Object|Function} [opts] Options or callback\n * @param {Boolean} [opts.stable] Consider only stable packages\n * @param {Boolean} [opts.dev] Consider devDependencies\n * @param {Boolean} [opts.optional] Consider optionalDependencies\n * @param {Boolean} [opts.peer] Consider peerDependencies\n * @param {Boolean} [opts.loose] Use loose option when querying semver\n * @param {Object} [opts.npm] npm configuration options\n * @param {Boolean} [opts.error.E404] Error on 404s\n * @param {Boolean} [opts.versions] For each dependency, return the available versions\n * @param {Boolean} [opts.rangeVersions] For each dependency, return the available versions for the range specified in the package.json\n * @param {Array} [opts.ignore] List of dependency names to ignore\n * @param {Function} cb Function that receives the results\n */\nexports.getUpdatedDependencies = function (manifest, opts, cb) {\n  if (!cb) {\n    cb = opts\n    opts = {}\n  } else {\n    opts = opts || {}\n  }\n  opts.error = opts.error || {}\n\n  getDependencies(manifest, opts, function (err, pkgs) {\n    if (err) return cb(err)\n\n    // Filter out the non-updated dependencies\n    Object.keys(pkgs).forEach(function (depName) {\n      if (pkgs[depName].warn) return\n\n      if (!isUpdated(pkgs[depName], opts)) {\n        delete pkgs[depName]\n      }\n    })\n\n    cb(err, pkgs)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-david/david/lib/version.js":"var semver = require('semver')\n\nvar unstablePattern = /[a-z+-]/i\n\n/**\n * Determine if a version is a stable version or not.\n * @param {String} version\n * @return {Boolean}\n */\nfunction isStable (version) {\n  return !unstablePattern.test(version || '')\n}\n\nexports.isStable = isStable\n\n/**\n * Determine if a version is a SCM URL or not.\n * @param {String} version\n * @return {Boolean}\n */\nfunction isScm (version) {\n  var scmPrefixes = ['git:', 'git+ssh:', 'https:', 'git+https:']\n  var blacklisted = scmPrefixes.filter(function (prefix) {\n    return version.indexOf(prefix) === 0\n  })\n  return !!blacklisted.length\n}\n\nexports.isScm = isScm\n\n/**\n * Get the latest stable version from a list of versions in ascending order.\n * @param {Array} versions\n * @return {String}\n */\nfunction getLatestStable (versions) {\n  versions = versions.slice()\n  while (versions.length) {\n    var version = versions.pop()\n    if (isStable(version)) {\n      return version\n    }\n  }\n  return null\n}\n\nexports.getLatestStable = getLatestStable\n\n/**\n * Get the latest version and latest stable version\n * @param {String} current The version you get when you `npm install [package]`\n * @param {Array} versions All versions available\n * @param {Object} opts Options\n * @param {Boolean} [opts.loose] Use loose option when querying semver\n */\nfunction getLatest (current, versions, opts) {\n  var stable = current\n  var latest = versions[versions.length - 1]\n\n  if (!isStable(stable)) {\n    stable = getLatestStable(versions)\n  }\n\n  // getLatestStable might not have found a stable version\n  if (stable) {\n    // Latest is the most recent version with higher version than stable\n    for (var i = versions.length - 1; i >= 0; i--) {\n      // If !opts.loose then this may throw\n      if (semver.gt(versions[i], stable, opts.loose)) {\n        latest = versions[i]\n        break\n      }\n    }\n  }\n\n  return { latest: latest, stable: stable }\n}\n\nexports.getLatest = getLatest\n\nfunction getVersionsInRange (range, versions, loose) {\n  return versions.filter(function (v) {\n    return semver.satisfies(v, range, loose)\n  })\n}\n\nexports.getVersionsInRange = getVersionsInRange\n","/home/travis/build/npmtest/node-npmtest-david/david/lib/npm.js":"var npm = require('npm')\nvar Batch = require('./batch')\n\nvar batch = new Batch()\n\n/**\n * Get info about the versions for this dependency. Returns an object with\n * `current` and `versions` properties. Where `current` is the version you'd\n * get when you `npm install [package]` and `versions` is a sorted array of\n * available versions for the dependency.\n * @param {String} name Dependency name\n * @param {Object} opts Options\n * @param {Object} [opts.npm] npm configuration options\n */\nfunction getVersionsInfo (name, opts, cb) {\n  if (batch.exists(name)) {\n    return batch.push(name, cb)\n  }\n\n  batch.push(name, cb)\n\n  npm.load(opts.npm || {}, function (err) {\n    if (err) return batch.call(name, function (cb) { cb(err) })\n\n    npm.commands.view([name, 'versions', 'time'], true, function (err, data) {\n      if (err) return batch.call(name, function (cb) { cb(err) })\n\n      var currentVersion = Object.keys(data)[0]\n      var versions = null\n\n      // `npm view 0 versions` returns {}\n      if (!currentVersion) {\n        return batch.call(name, function (cb) {\n          cb(new Error('Failed to get versions for ' + name))\n        })\n      }\n\n      // Some packages simply don't have a time object\n      if (data[currentVersion].time) {\n        versions = data[currentVersion].versions.sort(function (a, b) {\n          a = data[currentVersion].time[a]\n          b = data[currentVersion].time[b]\n          return (a < b ? -1 : (a > b ? 1 : 0))\n        })\n      } else {\n        versions = data[currentVersion].versions\n      }\n\n      batch.call(name, function (cb) {\n        cb(null, { current: currentVersion, versions: versions })\n      })\n    })\n  })\n}\n\nexports.getVersionsInfo = getVersionsInfo\n","/home/travis/build/npmtest/node-npmtest-david/david/lib/batch.js":"function Batch () {\n  if (!(this instanceof Batch)) return new Batch()\n  this._batch = {}\n}\n\n/**\n * Create or add a callback function to the end of a batch for a given key.\n * @param key\n * @param cb\n */\nBatch.prototype.push = function (key, cb) {\n  this._batch[key] = this._batch[key] || []\n  this._batch[key].push(cb)\n}\n\n/**\n * Determine if there is a batch for the given key.\n * @param {String} key\n * @returns {boolean}\n */\nBatch.prototype.exists = function (key) {\n  return this._batch[key] != null\n}\n\n/**\n * Call all the batched callback functions for a key and remove them.\n * @param {String} key ID of the batch operation\n * @param {Function} fn Function to call for each\n */\nBatch.prototype.call = function (key, cb) {\n  var cbs = this._batch[key]\n  this._batch[key] = null\n  cbs.forEach(cb)\n}\n\nmodule.exports = Batch\n"}